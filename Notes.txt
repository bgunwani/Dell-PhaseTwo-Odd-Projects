
ASP .NET Core - Web Development

	- New Version of ASP.NET Framework by Microsoft.
	- Platform Independent that runs the application on different platforms such as Windows, Linux or Mac.
	- An open source web framework.
	
ASP.NET MVC Core (Model-View-Controller):

	.Net Core Application runs on Kestrel Web Server.
	
Startup Class:

	- Consist two methods:
	
	ConfigureServices(): Helps in Adding Middlewares to the application.
	
	Configure(): Helps in Using Middlewares in application.
	
-----------------------------------------------

wwwroot folder:

	- By default, this folder is treated as webroot folder.
	- This folder should be present in root directory.
	- This folder contains static files for your application such as HTML, CSS, JavaScript, Fonts, Images and so on.
	- The files and folders from this wwwroot can be accessed as relative path to that root.
	
-----------------------------------------------

The UswDefaultFiles() middleware will search wwwroot folder for following files by default:

	index.htm
	index.html
	default.htm
	default.html
	
------------------------------------------------

ASP.NET Core MVC Framework:

	MVC - Model-View-Controller
	- Architectural Design that means a design pattern used at the architectural level of an application.
	- MVC is not a programming language, MVC is not a framework, it is a design pattern.
	- MVC helps in creating loosely-coupled architecture based application
	
Model:

	A component in MVC pattern which is used to manage data.
	The model represents a set of classes that is used to describe application validation logic, business logic and data access logic.
	
View:

	The view component is used to contain the logic to represent the model data to the user interface. The view is used to render the business data which is provided to it by the controller.
	
Controoler:

	A controller is data binder or request handler in MVC pattern. It consists various action methods to which a request comes and handles accordingly.

------------------------------------------------


Data Passing Mechanism from Controller to View and Sometime vice versa:

	1. ViewBag:
	
		To transfer data from controller to view and not vice-versa.
		ViewBag values will be null if redirection occurs.
		You can assign a primitive or a complex type object to ViewBag.
		We do not need to typecast ViewBag values before use.
			
	2. ViewData
	
		To transfer data from controller to view and not vice-versa.
		ViewBag values will be null if redirection occurs.
		You can assign a primitive or a complex type object to ViewBag.
		ViewData value must be typecast to an appropriate type before using it.
		ViewBag internally inserts the data in ViewData Dictionary.
		
	3. TempData
	
		To transfer data from view to controller, controller to view, or from one action method to another action method of the same or different controller. TemData request can be persisted for more than one request with the help of Keep() method.
	
We can also pass data with Model Binding.